desc:ownhilo (hipass and lowpass filter bobobo)
author: bobobo
version: 1.0.0
changelog:
 - taken from the ownsynth
about:
  # ownhilo 
hipass and lowpass filters with resonance  
clipper (boost and Limitwall)  
no gui
tags: effects, filter


// bobobo , as usual standing on shoulders of giants

// Thomas Scott Stillwell for the RBJ Highpass/Lowpass Filters [Stillwell]  (will be delivered with REAPER)
// the filter is here a low snd highpass (Effects/Witti/lphpbp_resonant) from witti (you'll find it in the REAPER forum)
// or here https://github.com/Samelot/Reaper/blob/master/Effects/Witti/lphpbp_resonant
// to prevent overshoots i put the soft_clipper
// and to get arround soundissues i applied the RBJ Highpass/Lowpass Filters
// i tried to make a nice gui but as this would increase cpu cycles (not much but measureable) i stopped this for now

//slider for the HP LF Filter
slider18:hpff=0<0,5000,0.01:log=1000>HP Frequency (Hz)
slider19:hpfr=0<0,1,0.001:sqr=0.25>HP Resonance
//slider for the LP LF Filter
slider20:lpff=16000<0,16000,0.01:log=1000>LP Frequency (Hz) //max 16000
slider21:lpfr=0<0,1,0.001:sqr=0.25>LP Resonance
//slider for chorus
slider22:chorus=0<0,1,0.001>Chorus
//slider for the Clipper
slider30:cl_boost=0<-24,24,0.1:sqr=2>Boost (dB)
slider31:cl_wall=0<-12,1,0.1>Output Brickwall (dB)

in_pin:none
out_pin:Left
out_pin:Right

/* Generated by: JSFX Pre-Processor (https://github.com/geraintluff/jsfx-preprocessor) */
@init

//for the clipper
ext_tail_size = -2;
 
amp_dB = 8.6562;
baseline_threshold_dB = -9.0;
cl_a = 1.017;
cl_b = -0.025;
//chorus
ch_bpos=0;
ch_choruslen=10*srate*0.001;
ch_bufofs=4096;
ch_csize=ch_choruslen/1 * 0.7;
ch_rateadj=0.5*2*$pi/srate;
ch_wetmix = 2 ^ (-1/6);
ch_drymix = 2 ^ (-1/6);
@slider

nchorus=chorus;

//hpf
hpf_freq=hpff;
hpf_tmp2=max(min(hpff,7350),0);
hpf_tmp=max(min(hpfr,0.99),0);
hpf_q=hpf_tmp;
hpf_freq=hpf_tmp2;
hpf_f = 2.0*sin($pi*hpf_freq/srate);
hpf_fb = hpf_q + hpf_q/(1.0 - hpf_f);

hpf_gain=1;

//lpf
lpf_freq=lpff;
lpf_tmp2=max(min(lpff,16000),20);
lpf_tmp=max(min(lpfr,0.99),0);
lpf_q=lpf_tmp;
lpf_freq=lpf_tmp2;
lpf_f = 2.0*sin($pi*lpf_freq/srate);
lpf_fb = lpf_q + lpf_q/(1.0 - lpf_f);

lpf_gain=1;

//for the clipper
boost_dB = cl_boost;
limit_dB = cl_wall;
threshold_dB = baseline_threshold_dB + limit_dB;


@block 


@sample


// Iterate over the active notes
//hpf
//spl0+=sup0; //add sup
//spl0+=sub0; //add sub
hpf_inA=spl0;
hpf_hpA = hpf_inA - hpf_buf0A;
hpf_bpA = hpf_buf0A - hpf_buf1A;
hpf_buf0A = hpf_buf0A + hpf_f * (hpf_hpA + hpf_fb * hpf_bpA);
hpf_buf1A = hpf_buf1A + hpf_f * (hpf_buf0A - hpf_buf1A);
(hpff>0)?(spl0=hpf_hpA*hpf_gain;);

//lpf
lpf_inA=spl0;
lpf_hpA = lpf_inA - lpf_buf0A;
lpf_bpA = lpf_buf0A - lpf_buf1A;
lpf_buf0A = lpf_buf0A + lpf_f * (lpf_hpA + lpf_fb * lpf_bpA);
lpf_buf1A = lpf_buf1A + lpf_f * (lpf_buf0A - lpf_buf1A);
(lpff<16000)?(spl0=lpf_buf1A*lpf_gain;);

// the clipper
dB0 = amp_dB * log(abs(spl0)) + boost_dB;

(dB0 > threshold_dB) ? (
  over_dB = dB0 - threshold_dB;
  over_dB = cl_a * over_dB + cl_b * over_dB * over_dB;
  dB0 = min(threshold_dB + over_dB, limit_dB);
);



spl0 = exp(dB0 / amp_dB) * sign(spl0);

//chorus
(nchorus>0)?(
ch_bpos >= ch_choruslen ? (
  ch_bpos=0;
);
ch_os0=spl0;
spl0=spl0*ch_drymix;
ch_vol=ch_wetmix/1;
ch_i=0;
loop(1,
   ch_tpos = ch_bpos - (0.5+0.49*sin( ch_i[0] += ch_rateadj)) * (ch_i+1) * ch_csize;
   ch_tpos < 0 ? ch_tpos += ch_choruslen;
   ch_frac=ch_tpos-(0|ch_tpos); 
   ch_ntpos=ch_tpos>=(ch_choruslen-1)?0:ch_tpos+1;
   spl0 +=nchorus*(ch_bufofs[ch_tpos]*(1-ch_frac) + ch_bufofs[ch_ntpos]*ch_frac ) * ch_vol;
   ch_i+=1;
);

ch_bufofs[ch_bpos]=ch_os0;
ch_bpos+=1;
);
    // fill the other side 
  spl1=spl0;

@gfx 1000 20
bg=gfx_getsyscol();
gfx_clear=bg;
gfx_r=gfx_g=gfx_b=0.5;
gfx_x=gfx_y=0;
gfx_drawstr("(hilo effect bobobo) no gui");
